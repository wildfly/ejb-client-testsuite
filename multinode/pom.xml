<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <parent>
        <groupId>org.wildfly</groupId>
        <artifactId>ejb-client-testsuite-parent</artifactId>
        <version>1.0.0.Final-SNAPSHOT</version>
    </parent>

    <artifactId>ejb-client-testsuite-multinode</artifactId>
    <name>EJB Client Testsuite: Multinode</name>
    <packaging>jar</packaging>

    <properties>
        <!-- Path to server zip archive, has to be specified at command line -->
        <server.zip>${project.basedir}/../snapshots/target/wildfly/build/target/wildfly-EJB-CLIENT-TESTSUITE.zip</server.zip>
        <!-- VM arguments for server instances -->
        <server.vm.arguments>-Xmx512M -Djava.net.preferIPv4Stack=true</server.vm.arguments>
        <server.jvm.jpms.args>--add-exports=java.desktop/sun.awt=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.security=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.management/javax.management=ALL-UNNAMED --add-opens=java.naming/javax.naming=ALL-UNNAMED</server.jvm.jpms.args>
        <client.jvm.jpms.args>--add-exports=java.desktop/sun.awt=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.security=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.management/javax.management=ALL-UNNAMED --add-opens=java.naming/javax.naming=ALL-UNNAMED --add-exports=jdk.naming.dns/com.sun.jndi.dns=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED</client.jvm.jpms.args>

        <!-- target directories for each server node -->
        <directory.nodes>${project.build.directory}/nodes</directory.nodes>
        <directory.node1>${directory.nodes}/node1</directory.node1>
        <directory.node2>${directory.nodes}/node2</directory.node2>
        <directory.cluster1-node1>${directory.nodes}/cluster1-node1</directory.cluster1-node1>
        <directory.cluster1-node2>${directory.nodes}/cluster1-node2</directory.cluster1-node2>
        <directory.cluster2-node1>${directory.nodes}/cluster2-node1</directory.cluster2-node1>
        <directory.cluster2-node2>${directory.nodes}/cluster2-node2</directory.cluster2-node2>

        <ipv6>false</ipv6>
        <node1.address>127.0.0.1</node1.address>
        <node1.application-port>8080</node1.application-port>
        <node1.management-port>9990</node1.management-port>
        <node2.address>127.0.0.1</node2.address>
        <node2.application-port>8180</node2.application-port>
        <node2.management-port>10090</node2.management-port>
        <cluster1-node1.address>127.0.0.1</cluster1-node1.address>
        <cluster1-node1.application-port>8280</cluster1-node1.application-port>
        <cluster1-node1.management-port>10190</cluster1-node1.management-port>
        <cluster1-node2.address>127.0.0.1</cluster1-node2.address>
        <cluster1-node2.application-port>8380</cluster1-node2.application-port>
        <cluster1-node2.management-port>10290</cluster1-node2.management-port>
        <cluster2-node1.address>127.0.0.1</cluster2-node1.address>
        <cluster2-node1.application-port>8480</cluster2-node1.application-port>
        <cluster2-node1.management-port>10390</cluster2-node1.management-port>
        <cluster2-node2.address>127.0.0.1</cluster2-node2.address>
        <cluster2-node2.application-port>8580</cluster2-node2.application-port>
        <cluster2-node2.management-port>10490</cluster2-node2.management-port>
        <cluster1.multicast-address>230.0.18.100</cluster1.multicast-address>
        <cluster2.multicast-address>230.0.18.100</cluster2.multicast-address>
        <server.startup.timeout>120</server.startup.timeout>
    </properties>

    <profiles>
        <profile>
            <id>ipv6</id>
            <properties>
                <ipv6>true</ipv6>
                <node1.address>::1</node1.address>
                <node1.application-port>8080</node1.application-port>
                <node1.management-port>9990</node1.management-port>
                <node2.address>::1</node2.address>
                <node2.application-port>8180</node2.application-port>
                <node2.management-port>10090</node2.management-port>
                <cluster1-node1.address>::1</cluster1-node1.address>
                <cluster1-node1.application-port>8280</cluster1-node1.application-port>
                <cluster1-node1.management-port>10190</cluster1-node1.management-port>
                <cluster1-node2.address>::1</cluster1-node2.address>
                <cluster1-node2.application-port>8380</cluster1-node2.application-port>
                <cluster1-node2.management-port>10290</cluster1-node2.management-port>
                <cluster2-node1.address>::1</cluster2-node1.address>
                <cluster2-node1.application-port>8480</cluster2-node1.application-port>
                <cluster2-node1.management-port>10390</cluster2-node1.management-port>
                <cluster2-node2.address>::1</cluster2-node2.address>
                <cluster2-node2.application-port>8580</cluster2-node2.application-port>
                <cluster2-node2.management-port>10490</cluster2-node2.management-port>
                <cluster1.multicast-address>ff05:1000::100:11</cluster1.multicast-address>
                <cluster2.multicast-address>ff05:1000::100:12</cluster2.multicast-address>
                <server.vm.arguments>-Xmx512M -Djava.net.preferIPv4Stack=false
                    -Djava.net.preferIPv6Addresses=true
                </server.vm.arguments>
            </properties>
        </profile>

        <profile>
            <id>jacoco</id>
            <properties>
                <jacoco.args.node1>
                    -javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-node1.exec
                </jacoco.args.node1>
                <jacoco.args.node2>
                    -javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-node2.exec
                </jacoco.args.node2>
                <jacoco.args.cluster1-node1>
                    -javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster1-node1.exec
                </jacoco.args.cluster1-node1>
                <jacoco.args.cluster1-node2>
                    -javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster1-node2.exec
                </jacoco.args.cluster1-node2>
                <jacoco.args.cluster2-node1>
                    -javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster2-node1.exec
                </jacoco.args.cluster2-node1>
                <jacoco.args.cluster2-node2>
                    -javaagent:${project.basedir}/jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster2-node2.exec
                </jacoco.args.cluster2-node2>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>generate-jacoco-html-report</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                                                 classpathref="maven.plugin.classpath"/>
                                        <!-- making path to tested JARs referenceable in build.xml -->
                                        <property name="modules.path"
                                                  value="${directory.node1}/modules"/>
                                        <ant antfile="${project.basedir}/build.xml">
                                            <target name="report"/>
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <exclusions>
                                    <exclusion>
                                        <groupId>ant</groupId>
                                        <artifactId>ant</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>merge-jacoco-reports</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>merge</goal>
                                </goals>
                                <configuration>
                                    <fileSets>
                                        <fileSet>
                                            <directory>${project.basedir}</directory>
                                            <includes>
                                                <include>target/*node*.exec</include>
                                            </includes>
                                        </fileSet>
                                    </fileSets>
                                    <destFile>${project.basedir}/target/jacoco-merged.exec</destFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>${groupId.ee.bom}</groupId>
                <artifactId>${artifactId.ee.bom}</artifactId>
                <version>${version.ee.bom}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${version.arquillian}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian.jakarta</groupId>
                <artifactId>arquillian-jakarta-bom</artifactId>
                <version>${version.arquillian.jakarta}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.shrinkwrap</groupId>
                <artifactId>shrinkwrap-bom</artifactId>
                <version>${version.shrinkwrap}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>${groupId.ejb.client.bom}</groupId>
            <artifactId>${artifactId.ejb.client.bom}</artifactId>
            <type>pom</type>
        </dependency>

        <!-- Related to tested server -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Arquillian related -->
        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-impl-base</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-managed</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.wildfly.core</groupId>
                    <artifactId>wildfly-launcher</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.launcher</groupId>
                    <artifactId>wildfly-launcher</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.launcher</groupId>
            <artifactId>wildfly-launcher</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-controller</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Creaper -->
        <dependency>
            <groupId>org.wildfly.extras.creaper</groupId>
            <artifactId>creaper-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.wildfly.extras.creaper</groupId>
            <artifactId>creaper-commands</artifactId>
        </dependency>
        <dependency><!-- We need to override creaper's wildfly-cli to be able to work with latest container -->
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-cli</artifactId>
        </dependency>

        <!-- Other -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.reload4j</groupId>
            <artifactId>reload4j</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.ejb3</groupId>
            <artifactId>jboss-ejb3-ext-api</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <testResources>
            <testResource>
                <directory>${project.basedir}/src/test/java</directory>
            </testResource>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
            </testResource>
        </testResources>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.5</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkCount>1</forkCount>
                    <reuseForks>false</reuseForks>
                    <systemPropertyVariables>
                        <server.zip>${server.zip}</server.zip>
                        <node1.jbossHome>${directory.node1}</node1.jbossHome>
                        <node1.address>${node1.address}</node1.address>
                        <node1.application-port>${node1.application-port}</node1.application-port>
                        <node1.management-port>${node1.management-port}</node1.management-port>
                        <node2.jbossHome>${directory.node2}</node2.jbossHome>
                        <node2.address>${node2.address}</node2.address>
                        <node2.application-port>${node2.application-port}</node2.application-port>
                        <node2.management-port>${node2.management-port}</node2.management-port>
                        <cluster1-node1.jbossHome>${directory.cluster1-node1}
                        </cluster1-node1.jbossHome>
                        <cluster1-node1.address>${cluster1-node1.address}</cluster1-node1.address>
                        <cluster1-node1.application-port>${cluster1-node1.application-port}
                        </cluster1-node1.application-port>
                        <cluster1-node1.management-port>${cluster1-node1.management-port}
                        </cluster1-node1.management-port>
                        <cluster1-node2.jbossHome>${directory.cluster1-node2}
                        </cluster1-node2.jbossHome>
                        <cluster1-node2.address>${cluster1-node2.address}</cluster1-node2.address>
                        <cluster1-node2.application-port>${cluster1-node2.application-port}
                        </cluster1-node2.application-port>
                        <cluster1-node2.management-port>${cluster1-node2.management-port}
                        </cluster1-node2.management-port>
                        <cluster2-node1.jbossHome>${directory.cluster2-node1}
                        </cluster2-node1.jbossHome>
                        <cluster2-node1.address>${cluster2-node1.address}</cluster2-node1.address>
                        <cluster2-node1.application-port>${cluster2-node1.application-port}
                        </cluster2-node1.application-port>
                        <cluster2-node1.management-port>${cluster2-node1.management-port}
                        </cluster2-node1.management-port>
                        <cluster2-node2.jbossHome>${directory.cluster2-node2}
                        </cluster2-node2.jbossHome>
                        <cluster2-node2.address>${cluster2-node2.address}</cluster2-node2.address>
                        <cluster2-node2.application-port>${cluster2-node2.application-port}
                        </cluster2-node2.application-port>
                        <cluster2-node2.management-port>${cluster2-node2.management-port}
                        </cluster2-node2.management-port>
                        <cluster1.multicast-address>${cluster1.multicast-address}</cluster1.multicast-address>
                        <cluster2.multicast-address>${cluster2.multicast-address}</cluster2.multicast-address>
                        <arquillian.launch>manual-mode</arquillian.launch>
                        <server.vm.arguments>${server.vm.arguments} ${server.jvm.jpms.args}</server.vm.arguments>
                        <ipv6>${ipv6}</ipv6>
                        <jacoco.args.node1>${jacoco.args.node1}</jacoco.args.node1>
                        <jacoco.args.node2>${jacoco.args.node2}</jacoco.args.node2>
                        <jacoco.args.cluster1-node1>${jacoco.args.cluster1-node1}</jacoco.args.cluster1-node1>
                        <jacoco.args.cluster1-node2>${jacoco.args.cluster1-node2}</jacoco.args.cluster1-node2>
                        <jacoco.args.cluster2-node1>${jacoco.args.cluster2-node1}</jacoco.args.cluster2-node1>
                        <jacoco.args.cluster2-node2>${jacoco.args.cluster2-node2}</jacoco.args.cluster2-node2>
                        <arquillian.launch>manual-mode</arquillian.launch>
                    </systemPropertyVariables>
                    <argLine>${client.jvm.jpms.args} -Dlauncher.skip.jpms.properties=true</argLine>
                </configuration>
            </plugin>

            <!-- prepare server distributions before running the test -->
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unzip-server</id>
                        <phase>process-test-sources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                if (!Boolean.getBoolean("skipUnzipServer")) {
                                    def ant = new AntBuilder()
                                    for(node in ["${directory.node1}",
                                                 "${directory.node2}",
                                                 "${directory.cluster1-node1}",
                                                 "${directory.cluster1-node2}",
                                                 "${directory.cluster2-node1}",
                                                 "${directory.cluster2-node2}"
                                            ]) {
                                        if(!new File("$node").exists()) {
                                            ant.unzip(src: "${server.zip}",
                                                      dest: "$node",
                                                      overwrite: "true"){ cutdirsmapper(dirs:"1") }
                                        } else {
                                            println "Not unzipping server zip into $node, because the directory already exists"
                                        }
                                    }
                                }
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
