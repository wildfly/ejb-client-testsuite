<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>


    <groupId>ejb-multi-server-ts</groupId>
    <artifactId>ejb-multi-server-ts-shaded-client</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.source>11</maven.compiler.source>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <version.arquillian>1.9.5.Final</version.arquillian>
        <version.arquillian.jakarta>10.0.0.Final</version.arquillian.jakarta>
        <version.shrinkwrap>1.2.6</version.shrinkwrap>

        <version.arquillian-container>5.1.0.Beta11</version.arquillian-container>
        <version.creaper>2.0.3</version.creaper>
        <version.jakartaee-api>11.0.0</version.jakartaee-api>
        <version.jboss-ejb3-ext-api>2.4.0.Final</version.jboss-ejb3-ext-api>
        <version.junit>4.13.2</version.junit>
        <version.org.wildfly.checkstyle-config>1.0.8.Final</version.org.wildfly.checkstyle-config>
        <version.reload4j>1.2.26</version.reload4j>

        <version.plugin.antrun>3.1.0</version.plugin.antrun>
        <version.plugin.antrun.ant>1.8.1</version.plugin.antrun.ant>
        <version.plugin.antrun.contrib>1.0b3</version.plugin.antrun.contrib>
        <version.plugin.compiler>3.11.0</version.plugin.compiler>
        <version.plugin.enforcer>3.6.0</version.plugin.enforcer>
        <version.plugin.install>3.1.4</version.plugin.install>
        <version.plugin.jacoco>0.8.13</version.plugin.jacoco>
        <version.plugin.jar>3.3.0</version.plugin.jar>
        <version.plugin.maven-checkstyle-plugin>3.6.0</version.plugin.maven-checkstyle-plugin>
        <version.plugin.surefire>3.0.0</version.plugin.surefire>
        <version.wf.core>26.0.1.Final</version.wf.core>


        <!-- Path to server zip archive, has to be specified at command line -->
        <server.zip/>
        <!-- VM arguments for server instances -->
        <server.vm.arguments>-Xmx512M -Djava.net.preferIPv4Stack=true</server.vm.arguments>
        <server.jvm.jpms.args>--add-exports=java.desktop/sun.awt=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.security=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.management/javax.management=ALL-UNNAMED --add-opens=java.naming/javax.naming=ALL-UNNAMED</server.jvm.jpms.args>
        <client.jvm.jpms.args>--add-exports=java.desktop/sun.awt=ALL-UNNAMED --add-exports=java.naming/com.sun.jndi.ldap=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.security=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.management/javax.management=ALL-UNNAMED --add-opens=java.naming/javax.naming=ALL-UNNAMED --add-exports=jdk.naming.dns/com.sun.jndi.dns=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED</client.jvm.jpms.args>


        <!-- target directories for each server node -->
        <server.zip>${project.build.directory}/server.zip</server.zip>
        <server.home>${project.build.directory}/server</server.home>
        <directory.nodes>${project.build.directory}/nodes</directory.nodes>
        <directory.node1>${directory.nodes}/node1</directory.node1>
        <directory.node2>${directory.nodes}/node2</directory.node2>
        <directory.cluster1-node1>${directory.nodes}/cluster1-node1</directory.cluster1-node1>
        <directory.cluster1-node2>${directory.nodes}/cluster1-node2</directory.cluster1-node2>
        <directory.cluster2-node1>${directory.nodes}/cluster2-node1</directory.cluster2-node1>
        <directory.cluster2-node2>${directory.nodes}/cluster2-node2</directory.cluster2-node2>

        <ipv6>false</ipv6>
        <node1.address>127.0.0.1</node1.address>
        <node1.application-port>8080</node1.application-port>
        <node1.management-port>9990</node1.management-port>
        <node2.address>127.0.0.1</node2.address>
        <node2.application-port>8180</node2.application-port>
        <node2.management-port>10090</node2.management-port>
        <cluster1-node1.address>127.0.0.1</cluster1-node1.address>
        <cluster1-node1.application-port>8280</cluster1-node1.application-port>
        <cluster1-node1.management-port>10190</cluster1-node1.management-port>
        <cluster1-node2.address>127.0.0.1</cluster1-node2.address>
        <cluster1-node2.application-port>8380</cluster1-node2.application-port>
        <cluster1-node2.management-port>10290</cluster1-node2.management-port>
        <cluster2-node1.address>127.0.0.1</cluster2-node1.address>
        <cluster2-node1.application-port>8480</cluster2-node1.application-port>
        <cluster2-node1.management-port>10390</cluster2-node1.management-port>
        <cluster2-node2.address>127.0.0.1</cluster2-node2.address>
        <cluster2-node2.application-port>8580</cluster2-node2.application-port>
        <cluster2-node2.management-port>10490</cluster2-node2.management-port>
        <cluster1.multicast-address>230.0.18.100</cluster1.multicast-address>
        <cluster2.multicast-address>230.0.18.100</cluster2.multicast-address>
        <server.startup.timeout>120</server.startup.timeout>
    </properties>

    <profiles>
        <profile>
            <id>ipv6</id>
            <properties>
                <ipv6>true</ipv6>
                <node1.address>::1</node1.address>
                <node1.application-port>8080</node1.application-port>
                <node1.management-port>9990</node1.management-port>
                <node2.address>::1</node2.address>
                <node2.application-port>8180</node2.application-port>
                <node2.management-port>10090</node2.management-port>
                <cluster1-node1.address>::1</cluster1-node1.address>
                <cluster1-node1.application-port>8280</cluster1-node1.application-port>
                <cluster1-node1.management-port>10190</cluster1-node1.management-port>
                <cluster1-node2.address>::1</cluster1-node2.address>
                <cluster1-node2.application-port>8380</cluster1-node2.application-port>
                <cluster1-node2.management-port>10290</cluster1-node2.management-port>
                <cluster2-node1.address>::1</cluster2-node1.address>
                <cluster2-node1.application-port>8480</cluster2-node1.application-port>
                <cluster2-node1.management-port>10390</cluster2-node1.management-port>
                <cluster2-node2.address>::1</cluster2-node2.address>
                <cluster2-node2.application-port>8580</cluster2-node2.application-port>
                <cluster2-node2.management-port>10490</cluster2-node2.management-port>
                <cluster1.multicast-address>ff05:1000::100:11</cluster1.multicast-address>
                <cluster2.multicast-address>ff05:1000::100:12</cluster2.multicast-address>
                <server.vm.arguments>-Xmx512M -Djava.net.preferIPv4Stack=false -Djava.net.preferIPv6Addresses=true</server.vm.arguments>
            </properties>
        </profile>

        <profile>
            <id>prepare</id>
            <activation>
                <property>
                    <name>prepare</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-enforcer-plugin</artifactId>
                        <version>${version.plugin.enforcer}</version>
                        <executions>
                            <execution>
                                <id>enforce-properties</id>
                                <goals>
                                    <goal>enforce</goal>
                                </goals>
                                <configuration>
                                    <rules>
                                        <requireProperty>
                                            <property>server.zip.url</property>
                                            <message>-Dserver.zip.url must be specified (url to server distribution)</message>
                                        </requireProperty>
                                    </rules>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>${version.plugin.antrun}</version>
                        <executions>
                            <execution>
                                <id>get-and-unzip-runtime-from-url</id>
                                <phase>generate-test-resources</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <echo message="Downloading and unzipping the server distribution."/>
                                        <get src="${server.zip.url}"
                                             dest="${server.zip}"/>
                                        <unzip src="${server.zip}"
                                               dest="${server.home}">
                                            <cutdirsmapper dirs="1"/>
                                        </unzip>
                                        <copy todir="${directory.node1}" overwrite="true">
                                            <fileset dir="${server.home}"/>
                                        </copy>
                                        <copy todir="${directory.node2}" overwrite="true">
                                            <fileset dir="${server.home}"/>
                                        </copy>
                                        <copy todir="${directory.cluster1-node1}" overwrite="true">
                                            <fileset dir="${server.home}"/>
                                        </copy>
                                        <copy todir="${directory.cluster1-node2}" overwrite="true">
                                            <fileset dir="${server.home}"/>
                                        </copy>
                                        <copy todir="${directory.cluster2-node1}" overwrite="true">
                                            <fileset dir="${server.home}"/>
                                        </copy>
                                        <copy todir="${directory.cluster2-node2}" overwrite="true">
                                            <fileset dir="${server.home}"/>
                                        </copy>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-install-plugin</artifactId>
                        <version>${version.plugin.install}</version>
                        <executions>
                            <execution>
                                <id>install-jboss-client-jar</id>
                                <phase>generate-test-resources</phase>
                                <goals>
                                    <goal>install-file</goal>
                                </goals>
                                <configuration>
                                    <file>${server.home}/bin/client/jboss-client.jar</file>
                                    <pomFile>${project.basedir}/pom-for-jboss-client-from-server.xml</pomFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>default-install</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-testCompile</id>
                                <phase>none</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>


        <profile>
            <id>testrun</id>
            <build>
                <testResources>
                    <testResource>
                        <directory>${project.basedir}/../src/test/java</directory>
                    </testResource>
                    <testResource>
                        <directory>${project.basedir}/../src/test/resources</directory>
                    </testResource>
                </testResources>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <forkCount>1</forkCount>
                            <reuseForks>false</reuseForks>
                            <systemPropertyVariables>
                                <node1.jbossHome>${directory.node1}</node1.jbossHome>
                                <node1.address>${node1.address}</node1.address>
                                <node1.application-port>${node1.application-port}</node1.application-port>
                                <node1.management-port>${node1.management-port}</node1.management-port>
                                <node2.jbossHome>${directory.node2}</node2.jbossHome>
                                <node2.address>${node2.address}</node2.address>
                                <node2.application-port>${node2.application-port}</node2.application-port>
                                <node2.management-port>${node2.management-port}</node2.management-port>
                                <cluster1-node1.jbossHome>${directory.cluster1-node1}
                                </cluster1-node1.jbossHome>
                                <cluster1-node1.address>${cluster1-node1.address}</cluster1-node1.address>
                                <cluster1-node1.application-port>${cluster1-node1.application-port}
                                </cluster1-node1.application-port>
                                <cluster1-node1.management-port>${cluster1-node1.management-port}
                                </cluster1-node1.management-port>
                                <cluster1-node2.jbossHome>${directory.cluster1-node2}
                                </cluster1-node2.jbossHome>
                                <cluster1-node2.address>${cluster1-node2.address}</cluster1-node2.address>
                                <cluster1-node2.application-port>${cluster1-node2.application-port}
                                </cluster1-node2.application-port>
                                <cluster1-node2.management-port>${cluster1-node2.management-port}
                                </cluster1-node2.management-port>
                                <cluster2-node1.jbossHome>${directory.cluster2-node1}
                                </cluster2-node1.jbossHome>
                                <cluster2-node1.address>${cluster2-node1.address}</cluster2-node1.address>
                                <cluster2-node1.application-port>${cluster2-node1.application-port}
                                </cluster2-node1.application-port>
                                <cluster2-node1.management-port>${cluster2-node1.management-port}
                                </cluster2-node1.management-port>
                                <cluster2-node2.jbossHome>${directory.cluster2-node2}
                                </cluster2-node2.jbossHome>
                                <cluster2-node2.address>${cluster2-node2.address}</cluster2-node2.address>
                                <cluster2-node2.application-port>${cluster2-node2.application-port}
                                </cluster2-node2.application-port>
                                <cluster2-node2.management-port>${cluster2-node2.management-port}
                                </cluster2-node2.management-port>
                                <cluster1.multicast-address>${cluster1.multicast-address}</cluster1.multicast-address>
                                <cluster2.multicast-address>${cluster2.multicast-address}</cluster2.multicast-address>
                                <arquillian.launch>manual-mode</arquillian.launch>
                                <server.vm.arguments>${server.vm.arguments} ${server.jvm.jpms.args}</server.vm.arguments>
                                <ipv6>${ipv6}</ipv6>
                                <jacoco.args.node1>${jacoco.args.node1}</jacoco.args.node1>
                                <jacoco.args.node2>${jacoco.args.node2}</jacoco.args.node2>
                                <jacoco.args.cluster1-node1>${jacoco.args.cluster1-node1}</jacoco.args.cluster1-node1>
                                <jacoco.args.cluster1-node2>${jacoco.args.cluster1-node2}</jacoco.args.cluster1-node2>
                                <jacoco.args.cluster2-node1>${jacoco.args.cluster2-node1}</jacoco.args.cluster2-node1>
                                <jacoco.args.cluster2-node2>${jacoco.args.cluster2-node2}</jacoco.args.cluster2-node2>
                            </systemPropertyVariables>
                            <argLine>${client.jvm.jpms.args} -Dlauncher.skip.jpms.properties=true</argLine>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <dependencies>
                <dependency>
                    <groupId>org.jboss.ejb-multinode-tests</groupId>
                    <artifactId>jboss-client</artifactId>
                    <version>1.0.0</version>
                    <type>jar</type>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <id>jacoco</id>
            <properties>
                <jacoco.args.node1>
                    -javaagent:${project.basedir}/../jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-node1.exec
                </jacoco.args.node1>
                <jacoco.args.node2>
                    -javaagent:${project.basedir}/../jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-node2.exec
                </jacoco.args.node2>
                <jacoco.args.cluster1-node1>
                    -javaagent:${project.basedir}/../jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster1-node1.exec
                </jacoco.args.cluster1-node1>
                <jacoco.args.cluster1-node2>
                    -javaagent:${project.basedir}/../jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster1-node2.exec
                </jacoco.args.cluster1-node2>
                <jacoco.args.cluster2-node1>
                    -javaagent:${project.basedir}/../jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster2-node1.exec
                </jacoco.args.cluster2-node1>
                <jacoco.args.cluster2-node2>
                    -javaagent:${project.basedir}/../jacoco/jacocoagent.jar=destfile=${project.build.directory}/jacoco-cluster2-node2.exec
                </jacoco.args.cluster2-node2>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>${version.plugin.antrun}</version>
                        <executions>
                            <execution>
                                <id>generate-jacoco-html-report</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                                                 classpathref="maven.plugin.classpath"/>
                                        <!-- making path to tested JARs referenceable in build.xml -->
                                        <property name="modules.path"
                                                  value="${directory.node1}/modules"/>
                                        <ant antfile="${project.basedir}/../build.xml">
                                            <target name="report"/>
                                        </ant>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <version>${version.plugin.antrun.contrib}</version>
                                <exclusions>
                                    <exclusion>
                                        <groupId>ant</groupId>
                                        <artifactId>ant</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${version.plugin.jacoco}</version>
                        <executions>
                            <execution>
                                <id>merge-jacoco-reports</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>merge</goal>
                                </goals>
                                <configuration>
                                    <fileSets>
                                        <fileSet>
                                            <directory>${project.basedir}/../</directory>
                                            <includes>
                                                <include>target/*node*.exec</include>
                                            </includes>
                                        </fileSet>
                                    </fileSets>
                                    <destFile>${project.basedir}/../target/jacoco-merged.exec</destFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${version.arquillian}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian.jakarta</groupId>
                <artifactId>arquillian-jakarta-bom</artifactId>
                <version>${version.arquillian.jakarta}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.shrinkwrap</groupId>
                <artifactId>shrinkwrap-bom</artifactId>
                <version>${version.shrinkwrap}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Related to tested server -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <version>${version.jakartaee-api}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Arquillian related -->
        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-impl-base</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet-jakarta</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-container-managed</artifactId>
            <scope>test</scope>
            <version>${version.arquillian-container}</version>
            <exclusions>     <!-- we want to use xnio from EJB client bom -->
                <exclusion>
                    <artifactId>xnio-api</artifactId>
                    <groupId>org.jboss.xnio</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>xnio-nio</artifactId>
                    <groupId>org.jboss.xnio</groupId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.arquillian</groupId>
                    <artifactId>wildfly-arquillian-protocol-jmx</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.security</groupId>
                    <artifactId>wildfly-elytron</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.client</groupId>
                    <artifactId>wildfly-client-config</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.common</groupId>
                    <artifactId>wildfly-common</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.xnio</groupId>
                    <artifactId>xnio-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.xnio</groupId>
                    <artifactId>xnio-nio</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.jboss.threads</groupId>
                    <artifactId>jboss-threads</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>io.undertow</groupId>
                    <artifactId>undertow-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.security</groupId>
                    <artifactId>wildfly-elytron</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.wildfly.core</groupId>
                    <artifactId>wildfly-launcher</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-common</artifactId>
            <version>${version.arquillian-container}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-launcher</artifactId>
            <version>${version.wf.core}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-controller</artifactId>
            <version>${version.wf.core}</version>
            <scope>test</scope>
        </dependency>


        <!-- Creaper -->
        <dependency>
            <groupId>org.wildfly.extras.creaper</groupId>
            <artifactId>creaper-core</artifactId>
            <version>${version.creaper}</version>
        </dependency>
        <dependency>
            <groupId>org.wildfly.extras.creaper</groupId>
            <artifactId>creaper-commands</artifactId>
            <version>${version.creaper}</version>
        </dependency>
        <dependency><!-- We need to override creaper's wildfly-cli to be able to work with latest container -->
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-cli</artifactId>
            <version>${version.wf.core}</version>
        </dependency>

        <!-- Other -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${version.junit}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.reload4j</groupId>
            <artifactId>reload4j</artifactId>
            <version>${version.reload4j}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.ejb3</groupId>
            <artifactId>jboss-ejb3-ext-api</artifactId>
            <version>${version.jboss-ejb3-ext-api}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <testSourceDirectory>${project.basedir}/../src/test/java</testSourceDirectory>
        <testResources>
            <testResource>
                <directory>${project.basedir}/../src/test/resources</directory>
            </testResource>
        </testResources>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${version.plugin.compiler}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${version.plugin.jar}</version>
                    <configuration>
                        <skipIfEmpty>true</skipIfEmpty>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${version.plugin.surefire}</version>
                    <configuration>
                        <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory"/>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${version.plugin.enforcer}</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.5</version>
                                </requireMavenVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${version.plugin.maven-checkstyle-plugin}</version>
                <executions>
                    <execution>
                        <id>check-style</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>checkstyle</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.wildfly.checkstyle</groupId>
                        <artifactId>wildfly-checkstyle-config</artifactId>
                        <version>${version.org.wildfly.checkstyle-config}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <configLocation>wildfly-checkstyle/checkstyle.xml</configLocation>
                    <consoleOutput>true</consoleOutput>
                    <failsOnError>true</failsOnError>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <useFile></useFile>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
